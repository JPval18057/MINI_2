Pseudocódigo del PIC
#include I2Clib.h
//INCLUIMOS LA LIBRERIA DE ELECTROSOME PARA HACER MAS FÁCILES LAS COSAS

setup:
//CONFIGURACION I/O
PORTB = OUTPUT
PORTA = INPUT
PORTE = INPUT
PORTC.RX -> INPUT //EUSART
PORTC.TX -> OUTPUT //EUSART
PORTC.SCL -> OUTPUT //RELOJ DEL I2C
PORTC.SDO -> OUTPUT //SERIAL DATA OUT
PORTC.SDA -> INPUT //SERIAL DATA IN I2C

//INICIALIZAR I2C
i2c_master_init(); //INICIALIZAMOS EL MODULO I2C CON UN RELOJ DE 100kHz 
I2C_interrupt(0); // el argumento indica que las interrupciones están apagadas para el i2c

//CONFIGURAR EUSART
BAUD_RATE = 9600; //BAUD RATE DE 9600
SYNC = 0; //MODO ASINCRONO
SPEN = 1; //ENCENDER MODULO
CREN = 1; //ENCENDER RECEPTOR
TXEN = 1; //ENCENDER TRANSMISOR
TXIE = 0; //APAGAR INTERRUPCIONES DE TRANSMISION
RXIE = 1; //ENCENDER INTERRUPCIONES DE RECEPCIÓN
RCIF = 0;
TXIF = 0; //APAGAMOS LAS BANDERAS

//TENEMOS ÚNICAMENTE LAS INTERRUPCIONES DEL EUSART

loop:
setup();
while(1){

if (DATA_IN==0X0A){
led0=1;
}
if (DATA_IN==0X0B){
led1=1;
}
if (DATA_IN==0X0C){
led2=1;
}
if (DATA_IN==0XFA){
led0=0;
}
if (DATA_IN==0XFB){
led1=0;
}
if (DATA_IN==0XFC){
led2=0;
}
if (DATA_IN==0XFF){
led0=0;
led1=0;
led2=0;

}
I2C_MASTER_START();//INICAMOS LA COMUNICACION
I2C_MASTER_WRITE(0xEC); //PONEMOS LA DIRECCION DEL SENSOR
I2C_MASTER_WRITE(0XF9); //PONEMOS EL REGISTRO DE LA TEMPERATURA
I2C_MASTER_STOP();//TERMINAMOS LA COMUNICACION
DELAY_MS(1); //ESPERAMOS UN TIEMPO PRUDENCIAL
I2C_MASTER_START();//INICIAMOS LA COMUNICACION
I2C_MASTER_WRITE(0XED); //DIRECCION EN MODO LECTURA
TEMP = I2C_MASTER_READ();//LEEMOS EL REGISTRO 0XF9 Y LO GUARDAMOS
DELAY_MS(1);
I2C_MASTER_STOP();//TERMINAMOS LA COMUNICACION

//AJUSTAMOS EL DATO DE 20 BITS SEGÚN EL DATASHEET DEL SENSOR
TEMP = MAP(TEMP, 20->8);

//MOSTRAMOS EL ESTADO EN EL PUERTO B
RB0 = led0;
RB1 = led1;
RB2 = led2;

//ENVIAMOS EL DATO POR EUSART EN MODO ASINCRONO
TXREG = TEMP;
}


interrupt:
if (RCIF==1){
RCIF=0;
DATA_IN = RCREG; //LEEMOS EL DATO QUE ENTRA
}

